<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>duek</title>
  
  <subtitle>爱猫，爱代码，爱生活</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dukevs.cn/"/>
  <updated>2018-07-05T03:49:14.171Z</updated>
  <id>http://www.dukevs.cn/</id>
  
  <author>
    <name>duke blog</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo下的md语法</title>
    <link href="http://www.dukevs.cn/mdlanguage.html"/>
    <id>http://www.dukevs.cn/mdlanguage.html</id>
    <published>2018-07-01T07:16:06.000Z</published>
    <updated>2018-07-05T03:49:14.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>宗旨</p><p>Markdown 的目标是实现「易读易写」。<br>可读性，无论如何，都是最重要的。一份使用 <code>Markdown</code> 格式撰写的文件应该可以直接以纯文本发布，并且看起来不会像是由许多标签或是格式指令所构成。Markdown 语法受到一些既有 text-to-HTML 格式的影响，包括 <code>Setext</code>、<code>atx</code>、<code>Textile</code>、<code>reStructuredText</code>、<code>Grutatext</code> 和 <code>EtText</code>，而最大灵感来源其实是纯文本电子邮件的格式。<br>总之， Markdown 的语法全由一些符号所组成，这些符号经过精挑细选，其作用一目了然。比如：在文字两旁加上星号，看起来就像<em>强调</em>。Markdown 的列表看起来，嗯，就是列表。Markdown 的区块引用看起来就真的像是引用一段文字，就像你曾在电子邮件中见过的那样。</p><p>兼容 HTML</p><p>Markdown 语法的目标是：成为一种适用于网络的书写语言。<br>Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。<br>不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。<br>要制约的只有一些 HTML 区块元素――比如 <div>、<table>、<pre>、<p> 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的 </p><p> 标签。</p><p>例子如下，在 Markdown 文件里加上一段 HTML 表格:</p><p>这是一个普通段落。</p><table><br>    <tr><br>        <td>Foo</td><br>    </tr><br></table><p>这是另一个普通段落。<br>请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的<em>强调</em>会没有效果。<br>HTML 的区段（行内）标签如 <span>、<cite>、<del> 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 <a> 或 <img> 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。<br>和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。<br>特殊字符自动转换<br>在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp; 符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &lt; 和 &amp;。<br>&amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到：<br><a href="http://images.google.com/images?num=30&amp;q=larry+bird" target="_blank" rel="noopener">http://images.google.com/images?num=30&amp;q=larry+bird</a><br>你必须要把网址转换写为：<br><a href="http://images.google.com/images?num=30&amp;q=larry+bird" target="_blank" rel="noopener">http://images.google.com/images?num=30&amp;q=larry+bird</a><br>才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。<br>Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;。<br>所以你如果要在文档中插入一个版权符号 ©，你可以这样写：<br>&copy;<br>Markdown 会保留它不动。而若你写：<br>AT&amp;T<br>Markdown 就会将它转为：<br>AT&amp;T<br>类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容 HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写：<br>4 &lt; 5<br>Markdown 将会把它转换为：<br>4 &lt; 5<br>不过需要注意的是，code 范围内，不论是行内还是区块， &lt; 和 &amp; 两个符号都一定会被转换成 HTML 实体，这项特性让你可以很容易地用 Markdown 写 HTML code （和 HTML 相对而言， HTML 语法中，你要把所有的 &lt; 和 &amp; 都转换为 HTML 实体，才能在 HTML 文件里面写出 HTML code。）</a></del></cite></span></p><p>区块元素<br>段落和换行<br>一个 Markdown 段落是由一个或多个连续的文本行组成，它的前后要有一个以上的空行（空行的定义是显示上看起来像是空的，便会被视为空行。比方说，若某一行只包含空格和制表符，则该行也会被视为空行）。普通段落不该用空格或制表符来缩进。<br>「由一个或多个连续的文本行组成」这句话其实暗示了 Markdown 允许段落内的强迫换行（插入换行符），这个特性和其他大部分的 text-to-HTML 格式不一样（包括 Movable Type 的「Convert Line Breaks」选项），其它的格式会把每个换行符都转成 <br> 标签。<br>如果你确实想要依赖 Markdown 来插入 <br> 标签的话，在插入处先按入两个以上的空格然后回车。<br>的确，需要多费点事（多加空格）来产生 <br> ，但是简单地「每个换行都转换为 <br>」的方法在 Markdown 中并不适合， Markdown 中 email 式的 区块引用 和多段落的 列表 在使用换行来排版的时候，不但更好用，还更方便阅读。<br>标题<br>Markdown 支持两种标题的语法，类 Setext 和类 atx 形式。<br>类 Setext 形式是用底线的形式，利用 = （最高阶标题）和 - （第二阶标题），例如：</p><h1 id="This-is-an-H1"><a href="#This-is-an-H1" class="headerlink" title="This is an H1"></a>This is an H1</h1><h2 id="This-is-an-H2"><a href="#This-is-an-H2" class="headerlink" title="This is an H2"></a>This is an H2</h2><p>任何数量的 = 和 - 都可以有效果。<br>类 Atx 形式则是在行首插入 1 到 6 个 # ，对应到标题 1 到 6 阶，例如：</p><h1 id="这是-H1"><a href="#这是-H1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2"><a href="#这是-H2" class="headerlink" title="这是 H2"></a>这是 H2</h2><h6 id="这是-H6"><a href="#这是-H6" class="headerlink" title="这是 H6"></a>这是 H6</h6><p>你可以选择性地「闭合」类 atx 样式的标题，这纯粹只是美观用的，若是觉得这样看起来比较舒适，你就可以在行尾加上 #，而行尾的 # 数量也不用和开头一样（行首的井字符数量决定标题的阶数）：</p><h1 id="这是-H1-1"><a href="#这是-H1-1" class="headerlink" title="这是 H1"></a>这是 H1</h1><h2 id="这是-H2-1"><a href="#这是-H2-1" class="headerlink" title="这是 H2"></a>这是 H2</h2><h3 id="这是-H3"><a href="#这是-H3" class="headerlink" title="这是 H3"></a>这是 H3</h3><p>区块引用 Blockquotes<br>Markdown 标记区块引用是使用类似 email 中用 &gt; 的引用方式。如果你还熟悉在 email 信件中的引言部分，你就知道怎么在 Markdown 文件中建立一个区块引用，那会看起来像是你自己先断好行，然后在每行的最前面加上 &gt; ：</p><blockquote><p>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.<br>Markdown 也允许你偷懒只在整个段落的第一行最前面加上 &gt; ：<br>This is a blockquote with two paragraphs. Lorem ipsum dolor sit amet,<br>consectetuer adipiscing elit. Aliquam hendrerit mi posuere lectus.<br>Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.</p></blockquote><blockquote><p>Donec sit amet nisl. Aliquam semper ipsum sit amet velit. Suspendisse<br>id sem consectetuer libero luctus adipiscing.<br>区块引用可以嵌套（例如：引用内的引用），只要根据层次加上不同数量的 &gt; ：<br>This is the first level of quoting.</p><blockquote><p>This is nested blockquote.</p></blockquote><p>Back to the first level.<br>引用的区块内也可以使用其他的 Markdown 语法，包括标题、列表、代码区块等：</p><h2 id="这是一个标题。"><a href="#这是一个标题。" class="headerlink" title="这是一个标题。"></a>这是一个标题。</h2><ol><li>这是第一行列表项。</li><li>这是第二行列表项。</li></ol><p>给出一些例子代码：</p><pre><code>return shell_exec(&quot;echo $input | $markdown_script&quot;);</code></pre><p>任何像样的文本编辑器都能轻松地建立 email 型的引用。例如在 BBEdit 中，你可以选取文字后然后从选单中选择增加引用阶层。<br>列表<br>Markdown 支持有序列表和无序列表。<br>无序列表使用星号、加号或是减号作为列表标记：</p><ul><li>Red</li><li>Green</li><li>Blue<br>等同于：</li></ul><ul><li>Red</li><li>Green</li><li>Blue<br>也等同于：</li></ul><ul><li>Red</li><li>Green</li><li>Blue<br>有序列表则使用数字接着一个英文句点：</li></ul><ol><li>Bird</li><li>McHale</li><li>Parish<br>很重要的一点是，你在列表标记上使用的数字并不会影响输出的 HTML 结果，上面的列表所产生的 HTML 标记为：</li></ol></blockquote><p><ol></ol></p><p><li>Bird</li></p><p><li>McHale</li></p><p><li>Parish</li><br><br>如果你的列表标记写成：</p><ol><li>Bird</li><li>McHale</li><li>Parish<br>或甚至是：</li><li>Bird</li><li>McHale</li><li>Parish<br>你都会得到完全相同的 HTML 输出。重点在于，你可以让 Markdown 文件的列表数字和输出的结果相同，或是你懒一点，你可以完全不用在意数字的正确性。<br>如果你使用懒惰的写法，建议第一个项目最好还是从 1. 开始，因为 Markdown 未来可能会支持有序列表的 start 属性。<br>列表项目标记通常是放在最左边，但是其实也可以缩进，最多 3 个空格，项目标记后面则一定要接着至少一个空格或制表符。<br>要让列表看起来更漂亮，你可以把内容用固定的缩进整理好：</li></ol><ul><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.<br>但是如果你懒，那也行：</li><li>Lorem ipsum dolor sit amet, consectetuer adipiscing elit.<br>Aliquam hendrerit mi posuere lectus. Vestibulum enim wisi,<br>viverra nec, fringilla in, laoreet vitae, risus.</li><li>Donec sit amet nisl. Aliquam semper ipsum sit amet velit.<br>Suspendisse id sem consectetuer libero luctus adipiscing.<br>如果列表项目间用空行分开，在输出 HTML 时 Markdown 就会将项目内容用 <p> 标签包起来，举例来说：</p></li><li>Bird</li><li>Magic<br>会被转换为：<br><ul><br><li>Bird</li><br><li>Magic</li><br></ul><br>但是这个：</li><li><p>Bird</p></li><li><p>Magic<br>会被转换为：<br><ul><br><li><p>Bird</p></li><br><li><p>Magic</p></li><br></ul><br>列表项目可以包含多个段落，每个项目下的段落都必须缩进 4 个空格或是 1 个制表符：</p></li></ul><ol><li><p>This is a list item with two paragraphs. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit. Aliquam hendrerit<br>mi posuere lectus.</p><p>Vestibulum enim wisi, viverra nec, fringilla in, laoreet<br>vitae, risus. Donec sit amet nisl. Aliquam semper ipsum<br>sit amet velit.</p></li><li><p>Suspendisse id sem consectetuer libero luctus adipiscing.<br>如果你每行都有缩进，看起来会看好很多，当然，再次地，如果你很懒惰，Markdown 也允许：</p></li></ol><ul><li><p>This is a list item with two paragraphs.</p><p>This is the second paragraph in the list item. You’re<br>only required to indent the first line. Lorem ipsum dolor<br>sit amet, consectetuer adipiscing elit.</p></li><li><p>Another item in the same list.<br>如果要在列表项目内放进引用，那 &gt; 就需要缩进：</p></li><li><p>A list item with a blockquote:</p><blockquote><p>This is a blockquote<br>inside a list item.<br>如果要放代码区块的话，该区块就需要缩进两次，也就是 8 个空格或是 2 个制表符：</p></blockquote></li><li><p>一列表项包含一个列表区块：</p><pre><code>&lt;代码写在这&gt;</code></pre><p>当然，项目列表很可能会不小心产生，像是下面这样的写法：</p></li></ul><ol start="1986"><li><p>What a great season.<br>换句话说，也就是在行首出现数字-句点-空白，要避免这样的状况，你可以在句点前面加上反斜杠。<br>1986. What a great season.<br>代码区块<br>和程序相关的写作或是标签语言原始码通常会有已经排版好的代码区块，通常这些区块我们并不希望它以一般段落文件的方式去排版，而是照原来的样子显示，Markdown 会用 <pre> 和 <code> 标签来把代码区块包起来。<br>要在 Markdown 中建立代码区块很简单，只要简单地缩进 4 个空格或是 1 个制表符就可以，例如，下面的输入：<br>这是一个普通段落：</code></pre></p><p>这是一个代码区块。<br>Markdown 会转换成：</p><p>这是一个普通段落：</p></li></ol><p><pre><code>这是一个代码区块。<br></code></pre><br>这个每行一阶的缩进（4 个空格或是 1 个制表符），都会被移除，例如：<br>Here is an example of AppleScript:</p><pre><code>tell application &quot;Foo&quot;    beepend tell</code></pre><p>会被转换为：</p><p>Here is an example of AppleScript:</p><p><pre><code>tell application “Foo”<br>    beep<br>end tell<br></code></pre><br>一个代码区块会一直持续到没有缩进的那一行（或是文件结尾）。<br>在代码区块里面， &amp; 、 &lt; 和 &gt; 会自动转成 HTML 实体，这样的方式让你非常容易使用 Markdown 插入范例用的 HTML 原始码，只需要复制贴上，再加上缩进就可以了，剩下的 Markdown 都会帮你处理，例如：<br>    <div class="footer"><br>        &copy; 2004 Foo Corporation<br>    </div><br>会被转换为：</p><p><pre><code>&lt;div class=”footer”&gt;<br>    &amp;copy; 2004 Foo Corporation<br>&lt;/div&gt;<br></code></pre><br>代码区块中，一般的 Markdown 语法不会被转换，像是星号便只是星号，这表示你可以很容易地以 Markdown 语法撰写 Markdown 语法相关的文件。<br>分隔线<br>你可以在一行中用三个以上的星号、减号、底线来建立一个分隔线，行内不能有其他东西。你也可以在星号或是减号中间插入空格。下面每种写法都可以建立分隔线：</p><hr><hr><hr><hr><hr><p>区段元素<br>链接<br>Markdown 支持两种形式的链接语法： 行内式和参考式两种形式。<br>不管是哪一种，链接文字都是用 [方括号] 来标记。<br>要建立一个行内式的链接，只要在方块括号后面紧接着圆括号并插入网址链接即可，如果你还想要加上链接的 title 文字，只要在网址后面，用双引号把 title 文字包起来即可，例如：<br>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener">an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no title attribute.<br>会产生：</p><p>This is <a href="http://example.com/" title="Title" target="_blank" rel="noopener"><br>an example</a> inline link.</p><p><a href="http://example.net/" target="_blank" rel="noopener">This link</a> has no<br>title attribute.</p><br>如果你是要链接到同样主机的资源，你可以使用相对路径：<br>See my <a href="/about/">About</a> page for details.<br>参考式的链接是在链接文字的括号后面再接上另一个方括号，而在第二个方括号里面要填入用以辨识链接的标记：<br>This is [an example][id] reference-style link.<br>你也可以选择性地在两个方括号中间加上一个空格：<br>This is [an example] [id] reference-style link.<br>接着，在文件的任意处，你可以把这个标记的链接内容定义出来：<br>[id]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a>  “Optional Title Here”<br>链接内容定义的形式为：<br>方括号（前面可以选择性地加上至多三个空格来缩进），里面输入链接文字<br>接着一个冒号<br>接着一个以上的空格或制表符<br>接着链接的网址<br>选择性地接着 title 内容，可以用单引号、双引号或是括弧包着<br>下面这三种链接的定义都是相同：<br>[foo]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a>  “Optional Title Here”<br>[foo]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a>  ‘Optional Title Here’<br>[foo]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a>  (Optional Title Here)<br>请注意：有一个已知的问题是 Markdown.pl 1.0.1 会忽略单引号包起来的链接 title。<br>链接网址也可以用尖括号包起来：<br>[id]: <a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a>  “Optional Title Here”<br>你也可以把 title 属性放到下一行，也可以加一些缩进，若网址太长的话，这样会比较好看：<br>[id]: <a href="http://example.com/longish/path/to/resource/here" target="_blank" rel="noopener">http://example.com/longish/path/to/resource/here</a><br>    “Optional Title Here”<br>网址定义只有在产生链接的时候用到，并不会直接出现在文件之中。<br>链接辨别标签可以有字母、数字、空白和标点符号，但是并不区分大小写，因此下面两个链接是一样的：<br>[link text][a]<br>[link text][A]<br>隐式链接标记功能让你可以省略指定链接标记，这种情形下，链接标记会视为等同于链接文字，要用隐式链接标记只要在链接文字后面加上一个空的方括号，如果你要让 “Google” 链接到 google.com，你可以简化成：<br>[Google][]<br>然后定义链接内容：<br>[Google]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a><br>由于链接文字可能包含空白，所以这种简化型的标记内也许包含多个单词：<br>Visit [Daring Fireball][] for more information.<br>然后接着定义链接：<br>[Daring Fireball]: <a href="http://daringfireball.net/" target="_blank" rel="noopener">http://daringfireball.net/</a><br>链接的定义可以放在文件中的任何一个地方，我比较偏好直接放在链接出现段落的后面，你也可以把它放在文件最后面，就像是注解一样。<br>下面是一个参考式链接的范例：<br>I get 10 times more traffic from [Google] [1] than from<br>[Yahoo] [2] or [MSN] [3].<br><br>  [1]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a>        “Google”<br>  [2]: <a href="http://search.yahoo.com/" target="_blank" rel="noopener">http://search.yahoo.com/</a>  “Yahoo Search”<br>  [3]: <a href="http://search.msn.com/" target="_blank" rel="noopener">http://search.msn.com/</a>    “MSN Search”<br>如果改成用链接名称的方式写：<br>I get 10 times more traffic from [Google][] than from<br>[Yahoo][] or [MSN][].<br><br>  [google]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a>        “Google”<br>  [yahoo]:  <a href="http://search.yahoo.com/" target="_blank" rel="noopener">http://search.yahoo.com/</a>  “Yahoo Search”<br>  [msn]:    <a href="http://search.msn.com/" target="_blank" rel="noopener">http://search.msn.com/</a>    “MSN Search”<br>上面两种写法都会产生下面的 HTML。<br><p>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a> than from<br><a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a><br>or <a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.</p><br>下面是用行内式写的同样一段内容的 Markdown 文件，提供作为比较之用：<br>I get 10 times more traffic from <a href="http://google.com/" title="Google" target="_blank" rel="noopener">Google</a><br>than from <a href="http://search.yahoo.com/" title="Yahoo Search" target="_blank" rel="noopener">Yahoo</a> or<br><a href="http://search.msn.com/" title="MSN Search" target="_blank" rel="noopener">MSN</a>.<br>参考式的链接其实重点不在于它比较好写，而是它比较好读，比较一下上面的范例，使用参考式的文章本身只有 81 个字符，但是用行内形式的却会增加到 176 个字元，如果是用纯 HTML 格式来写，会有 234 个字元，在 HTML 格式中，标签比文本还要多。<br>使用 Markdown 的参考式链接，可以让文件更像是浏览器最后产生的结果，让你可以把一些标记相关的元数据移到段落文字之外，你就可以增加链接而不让文章的阅读感觉被打断。<br>强调<br>Markdown 使用星号（<em>）和底线（_）作为标记强调字词的符号，被 </em> 或 _ 包围的字词会被转成用 <em> 标签包围，用两个 <em> 或 _ 包起来的话，则会被转成 <strong>，例如：</strong></em>single asterisks<em><br><br><em>single underscores</em><br><br><strong>double asterisks</strong><br><br><strong>double underscores</strong><br>会转成：<br><em>single asterisks</em><br><br><em>single underscores</em><br><br><strong>double asterisks</strong><br><br><strong>double underscores</strong><br>你可以随便用你喜欢的样式，唯一的限制是，你用什么符号开启标签，就要用什么符号结束。<br>强调也可以直接插在文字中间：<br>un</em>frigging<em>believable<br>但是如果你的 </em> 和 _ 两边都有空白的话，它们就只会被当成普通的符号。<br>如果要在文字前后直接插入普通的星号或底线，你可以用反斜线：<br>*this text is surrounded by literal asterisks*<br>代码<br>如果要标记一小段行内代码，你可以用反引号把它包起来（<code>），例如：Use the</code>printf()<code>function.会产生：&lt;p&gt;Use the &lt;code&gt;printf()&lt;/code&gt; function.&lt;/p&gt;如果要在代码区段内插入反引号，你可以用多个反引号来开启和结束代码区段：`</code>There is a literal backtick (<code>) here.`</code><br>这段语法会产生：<br><p><code>There is a literal backtick (<code>) here.&lt;/code&gt;&lt;/p&gt;代码区段的起始和结束端都可以放入一个空白，起始端后面一个，结束端前面一个，这样你就可以在区段的一开始就插入反引号：A single backtick in a code span: `</code> <code>`</code><br><br>A backtick-delimited string in a code span: <code>`foo`</code><br>会产生：<br><p>A single backtick in a code span: <code>`</code></p><p></p><p>A backtick-delimited string in a code span: <code><code>foo</code></code></p><br>在代码区段内，&amp; 和尖括号都会被自动地转成 HTML 实体，这使得插入 HTML 原始码变得很容易，Markdown 会把下面这段：<br>Please don’t use any <code>&lt;blink&gt;</code> tags.<br>转为：</code></p><p></p><p>Please don’t use any <code>&lt;blink&gt;</code> tags.</p><br>你也可以这样写：<br><code>&amp;#8212;</code> is the decimal-encoded equivalent of <code>&amp;mdash;</code>.<br>以产生：</em></pre></table></div></p><p></p><p><code>&amp;#8212;</code> is the decimal-encoded<br>equivalent of <code>&amp;mdash;</code>.</p><br>图片<br>很明显地，要在纯文字应用中设计一个「自然」的语法来插入图片是有一定难度的。<br>Markdown 使用一种和链接很相似的语法来标记图片，同样也允许两种样式： 行内式和参考式。<br>行内式的图片语法看起来像是：<br><img src="/path/to/img.jpg" alt="Alt text"><p></p><p><img src="/path/to/img.jpg" alt="Alt text" title="Optional title"><br>详细叙述如下：<br>一个惊叹号 !<br>接着一个方括号，里面放上图片的替代文字<br>接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上 选择性的 ‘title’ 文字。<br>参考式的图片语法则长得像这样：<br>![Alt text][id]<br>「id」是图片参考的名称，图片参考的定义方式则和连结参考一样：<br>[id]: url/to/image  “Optional title attribute”<br>到目前为止， Markdown 还没有办法指定图片的宽高，如果你需要的话，你可以使用普通的 <img> 标签。</p><p>其它<br>自动链接<br>Markdown 支持以比较简短的自动链接形式来处理网址和电子邮件信箱，只要是用尖括号包起来， Markdown 就会自动把它转成链接。一般网址的链接文字就和链接地址一样，例如：<br><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br>Markdown 会转为：<br><a href="http://example.com/" target="_blank" rel="noopener">http://example.com/</a><br>邮址的自动链接也很类似，只是 Markdown 会先做一个编码转换的过程，把文字字符转成 16 进位码的 HTML 实体，这样的格式可以糊弄一些不好的邮址收集机器人，例如：<br><a href="mailto:&#x61;&#x64;&#100;&#114;&#101;&#115;&#115;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;" target="_blank" rel="noopener">&#x61;&#x64;&#100;&#114;&#101;&#115;&#115;&#64;&#101;&#120;&#97;&#x6d;&#x70;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a><br>Markdown 会转成：<br><a href="&#x6D;&#x61;i&#x6C;&#x74;&#x6F;:&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;">&#x61;&#x64;&#x64;&#x72;&#x65;&#115;&#115;&#64;&#101;&#120;&#x61;<br>&#109;&#x70;&#x6C;e&#x2E;&#99;&#111;&#109;</a><br>在浏览器里面，这段字串（其实是 <a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>）会变成一个可以点击的「<a href="mailto:address@example.com" target="_blank" rel="noopener">address@example.com</a>」链接。<br>（这种作法虽然可以糊弄不少的机器人，但并不能全部挡下来，不过总比什么都不做好些。不管怎样，公开你的信箱终究会引来广告信件的。）<br>反斜杠<br>Markdown 可以利用反斜杠来插入一些在语法中有其它意义的符号，例如：如果你想要用星号加在文字旁边的方式来做出强调效果（但不用 <em> 标签），你可以在星号的前面加上反斜杠：<br>*literal asterisks*<br>Markdown 支持以下这些符号前面加上反斜杠来帮助插入普通的符号：<br>\   反斜线<br>`   反引号</em></p><ul><li>星号<br>_   底线<br>{}  花括号<br>[]  方括号<br>()  括弧<h1 id="井字号"><a href="#井字号" class="headerlink" title="井字号"></a>井字号</h1></li></ul><ul><li>加号</li></ul><ul><li>减号<br>.   英文句点<br>!   惊叹号</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;宗旨&lt;/p&gt;
&lt;p&gt;Markdown 的目标是实现「易读易写」。&lt;br&gt;可读性，无论如何，都是最重要的。一份使用 &lt;code&gt;Markdow
      
    
    </summary>
    
    
      <category term="github" scheme="http://www.dukevs.cn/tags/github/"/>
    
      <category term="hexo" scheme="http://www.dukevs.cn/tags/hexo/"/>
    
      <category term="md" scheme="http://www.dukevs.cn/tags/md/"/>
    
  </entry>
  
  <entry>
    <title>seocontent</title>
    <link href="http://www.dukevs.cn/seocontent.html"/>
    <id>http://www.dukevs.cn/seocontent.html</id>
    <published>2018-06-29T07:22:01.000Z</published>
    <updated>2018-06-29T07:22:01.633Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>30个影响Goolge Ranking得分的因素</title>
    <link href="http://www.dukevs.cn/GoogleRanking.html"/>
    <id>http://www.dukevs.cn/GoogleRanking.html</id>
    <published>2018-06-29T03:17:49.000Z</published>
    <updated>2018-07-05T03:48:04.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="30个影响Goolge-Ranking得分的因素"><a href="#30个影响Goolge-Ranking得分的因素" class="headerlink" title="30个影响Goolge Ranking得分的因素"></a>30个影响Goolge Ranking得分的因素</h2><p><img src="/images/30-Most-Important-Google-Ranking-Factors-A-Beginner-Should-Know-640x250.png" alt="google rank img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;30个影响Goolge-Ranking得分的因素&quot;&gt;&lt;a href=&quot;#30个影响Goolge-Ranking得分的因素&quot; class=&quot;headerlink&quot; title=&quot;30个影响Goolge Ranking得分的因素&quot;&gt;&lt;/a&gt;30个影响Goolge Ra
      
    
    </summary>
    
    
      <category term="google" scheme="http://www.dukevs.cn/tags/google/"/>
    
      <category term="google ranking" scheme="http://www.dukevs.cn/tags/google-ranking/"/>
    
  </entry>
  
  <entry>
    <title>Homebrew - 安装与使用</title>
    <link href="http://www.dukevs.cn/usehomebrew.html"/>
    <id>http://www.dukevs.cn/usehomebrew.html</id>
    <published>2018-06-24T11:32:09.000Z</published>
    <updated>2018-06-29T01:07:09.211Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Homebrew-安装与使用"><a href="#Homebrew-安装与使用" class="headerlink" title="Homebrew - 安装与使用"></a>Homebrew - 安装与使用</h2><h4 id="1-Homebrew是什么？"><a href="#1-Homebrew是什么？" class="headerlink" title="1.Homebrew是什么？"></a>1.Homebrew是什么？</h4><p>Homebrew是以最简单，最灵活的方式来安装苹果公司在MacOS中不包含的UNIX工具。<br>官网：<a href="https://brew.sh/index_zh-cn.html]" target="_blank" rel="noopener">传送门</a><br>Git仓库地址：<a href="https://github.com/Homebrew/brew/" target="_blank" rel="noopener">传送门</a></p><h4 id="2-Homebrew-怎么安装-？怎么卸载-？"><a href="#2-Homebrew-怎么安装-？怎么卸载-？" class="headerlink" title="2.Homebrew 怎么安装 ？怎么卸载 ？"></a>2.Homebrew 怎么安装 ？怎么卸载 ？</h4><p>安装，打开终端，复制粘贴，大约1分钟左右，下载完成，过程中需要输入密码，其他无需任何操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>卸载，有安装就要有卸载，打开终端，复制粘贴： </p><p>其实只用把上面安装的install换成uninstall就行了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall)</span>"</span></span><br></pre></td></tr></table></figure><h4 id="3-Homebrew-怎么使用？常用命令有哪些？"><a href="#3-Homebrew-怎么使用？常用命令有哪些？" class="headerlink" title="3.Homebrew 怎么使用？常用命令有哪些？"></a>3.Homebrew 怎么使用？常用命令有哪些？</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">安装软件，如：brew install oclint</span><br><span class="line">卸载软件，如：brew uninstall oclint</span><br><span class="line">搜索软件，如：brew search oclint</span><br><span class="line">更新软件，如：brew upgrade oclint</span><br><span class="line">查看安装列表， 如：brew list</span><br><span class="line">更新Homebrew，如：brew update</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Homebrew-安装与使用&quot;&gt;&lt;a href=&quot;#Homebrew-安装与使用&quot; class=&quot;headerlink&quot; title=&quot;Homebrew - 安装与使用&quot;&gt;&lt;/a&gt;Homebrew - 安装与使用&lt;/h2&gt;&lt;h4 id=&quot;1-Homebrew是什么
      
    
    </summary>
    
    
      <category term="hemebrew" scheme="http://www.dukevs.cn/tags/hemebrew/"/>
    
  </entry>
  
  <entry>
    <title>WooCommerce 是什么？</title>
    <link href="http://www.dukevs.cn/woocommens.html"/>
    <id>http://www.dukevs.cn/woocommens.html</id>
    <published>2018-06-23T12:04:51.000Z</published>
    <updated>2018-07-05T03:50:23.530Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WooCommerce-是什么？"><a href="#WooCommerce-是什么？" class="headerlink" title="WooCommerce 是什么？"></a>WooCommerce 是什么？</h2><p>`</p><p><div class="wooco-content"></div></p><p></p><h2>世界上最受欢迎的<span>电子商务解决方案</span></h2><p></p><p></p><p>所有数据完全由您掌控</p><p></p><p></p><p>从今天开始使用吧 ！</p><br><br>`<p></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WooCommerce-是什么？&quot;&gt;&lt;a href=&quot;#WooCommerce-是什么？&quot; class=&quot;headerlink&quot; title=&quot;WooCommerce 是什么？&quot;&gt;&lt;/a&gt;WooCommerce 是什么？&lt;/h2&gt;&lt;p&gt;`&lt;/p&gt;
&lt;p&gt;&lt;div 
      
    
    </summary>
    
      <category term="wordpress" scheme="http://www.dukevs.cn/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="http://www.dukevs.cn/tags/wordpress/"/>
    
      <category term="woocommerce" scheme="http://www.dukevs.cn/tags/woocommerce/"/>
    
      <category term="b2c" scheme="http://www.dukevs.cn/tags/b2c/"/>
    
  </entry>
  
  <entry>
    <title>hexo 添加disqus评论系统</title>
    <link href="http://www.dukevs.cn/hexodisqus.html"/>
    <id>http://www.dukevs.cn/hexodisqus.html</id>
    <published>2018-06-20T15:18:20.000Z</published>
    <updated>2018-07-05T03:48:56.474Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo-添加disqus评论系统"><a href="#hexo-添加disqus评论系统" class="headerlink" title="hexo 添加disqus评论系统"></a>hexo 添加disqus评论系统</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">可以用到的评论系统有挺多的，多说，disqus等，这里只mark下disqus，</span><br><span class="line">disqus 的添加跟主题有关，因为hexo自带disqus，所以添加起来非常简单，这里讲下默认的主题landscape 和 上面演示的主题maupassant</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo-添加disqus评论系统&quot;&gt;&lt;a href=&quot;#hexo-添加disqus评论系统&quot; class=&quot;headerlink&quot; title=&quot;hexo 添加disqus评论系统&quot;&gt;&lt;/a&gt;hexo 添加disqus评论系统&lt;/h2&gt;&lt;figure class
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://www.dukevs.cn/tags/hexo/"/>
    
      <category term="disqus" scheme="http://www.dukevs.cn/tags/disqus/"/>
    
  </entry>
  
  <entry>
    <title>WordPress无插件禁止登陆admin用户名账户</title>
    <link href="http://www.dukevs.cn/wordpressadmincont.html"/>
    <id>http://www.dukevs.cn/wordpressadmincont.html</id>
    <published>2018-06-20T14:15:07.000Z</published>
    <updated>2018-07-03T08:44:32.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WordPress无插件禁止登陆admin用户名账户"><a href="#WordPress无插件禁止登陆admin用户名账户" class="headerlink" title="WordPress无插件禁止登陆admin用户名账户"></a>WordPress无插件禁止登陆admin用户名账户</h2><p>早些时候如果我们有创建WordPress站点的时候默认是需要创建admin用户名的，包括我们一些公司的老的企业网站，他们默认都还是这个用户名。但是由于安全的考虑，准备将屏蔽用户名是admin的登录和扫描，不过如果我们是新WordPress建站的，应该不会用admin用户名。安装向导是可以设置自定义用户名。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//WP禁止admin用户名</span><br><span class="line">add_filter( <span class="string">'wp_authenticate'</span>, <span class="string">'wp_no_admin_user'</span> );</span><br><span class="line"><span class="keyword">function</span> wp_no_admin_user(<span class="variable">$user</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$user</span> == <span class="string">'admin'</span>)&#123;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">add_filter(<span class="string">'sanitize_user'</span>, <span class="string">'wp_sanitize_user_no_admin'</span>,10,3);</span><br><span class="line"><span class="keyword">function</span> wp_sanitize_user_no_admin(<span class="variable">$username</span>, <span class="variable">$raw_username</span>, <span class="variable">$strict</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$raw_username</span> == <span class="string">'admin'</span> || <span class="variable">$username</span> == <span class="string">'admin'</span>)&#123;</span><br><span class="line"><span class="built_in">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$username</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将代码加入到当前主题Functions.php文件中。就可以屏蔽如果用admin输入用户名登入账户。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WordPress无插件禁止登陆admin用户名账户&quot;&gt;&lt;a href=&quot;#WordPress无插件禁止登陆admin用户名账户&quot; class=&quot;headerlink&quot; title=&quot;WordPress无插件禁止登陆admin用户名账户&quot;&gt;&lt;/a&gt;WordPres
      
    
    </summary>
    
      <category term="wordpress" scheme="http://www.dukevs.cn/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="http://www.dukevs.cn/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>PHP 7.1 的 A non-numeric value encountered 错误和解决方法</title>
    <link href="http://www.dukevs.cn/phpencounterederror.html"/>
    <id>http://www.dukevs.cn/phpencounterederror.html</id>
    <published>2018-06-19T15:28:12.000Z</published>
    <updated>2018-06-19T15:30:52.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP-7-1-的-A-non-numeric-value-encountered-错误和解决方法"><a href="#PHP-7-1-的-A-non-numeric-value-encountered-错误和解决方法" class="headerlink" title="PHP 7.1 的 A non-numeric value encountered 错误和解决方法"></a>PHP 7.1 的 A non-numeric value encountered 错误和解决方法</h2><p>升级到 PHP 7.1 之后，经常收到 A non-numeric value encountered 的 warning 信息。比如下面这段代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">'123a'</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">'b456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span>+<span class="variable">$b</span>;</span><br></pre></td></tr></table></figure><h2 id="PHP-7-1-新-E-WARNING"><a href="#PHP-7-1-新-E-WARNING" class="headerlink" title="PHP 7.1 新 E_WARNING"></a>PHP 7.1 新 E_WARNING</h2><p>这是 PHP7.1 新增的 waring 信息，官方的解释是：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">New E_WARNING and E_NOTICE errors have been introduced when invalid strings are coerced using operators expecting numbers (+ - * / ** % &lt;&lt; &gt;&gt; | &amp; ^) or their assignment equivalents. An E_NOTICE is emitted when the string begins with a numeric value but contains trailing non-numeric characters, and an E_WARNING is emitted when the string does not contain a numeric value.</span><br><span class="line">在使用 (+ – * / ** % &lt;&lt; &gt;&gt; | &amp; ^) 这些运算操作符时，例如 a+b，如果 a(123a) 和 b(b456) 包含非数字字符时，就会有 A non-numeric value encountered 警告。</span><br></pre></td></tr></table></figure><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>对于这种问题，首先应该在代码逻辑查看，为何会出现混合数值，检查哪里导致出现混合数值。</p><p>对于(+ – * / ** % &lt;&lt; &gt;&gt; | &amp; ^) 的运算，可以使用强制类型转换方法 (intval)，把字符串转换成数字：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">'123a'</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">'b456'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> intval(<span class="variable">$a</span>)+intval(<span class="variable">$b</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;PHP-7-1-的-A-non-numeric-value-encountered-错误和解决方法&quot;&gt;&lt;a href=&quot;#PHP-7-1-的-A-non-numeric-value-encountered-错误和解决方法&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="php" scheme="http://www.dukevs.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>设置WordPress回复评论无插件微信提醒功能</title>
    <link href="http://www.dukevs.cn/wordwechatplugin.html"/>
    <id>http://www.dukevs.cn/wordwechatplugin.html</id>
    <published>2018-06-19T15:21:20.000Z</published>
    <updated>2018-07-05T03:49:58.562Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设置WordPress回复评论无插件微信提醒功能"><a href="#设置WordPress回复评论无插件微信提醒功能" class="headerlink" title="设置WordPress回复评论无插件微信提醒功能"></a>设置WordPress回复评论无插件微信提醒功能</h2><p>如果我们在使用WordPress程序建站的时候，和网友进行互动一般是通过评论。能在第一时间给网友评论确实可以提高交互及时性。常见的我们有直接在每天看看是否有人评论，或者是用邮件提醒。但是有些时候由于服务器的问题，设置邮件提醒可能比较麻烦。这里我们可以使用微信提醒。</p><p>这里我们是使用的Server酱接口进行提醒的。</p><h3 id="第一、申请接口"><a href="#第一、申请接口" class="headerlink" title="第一、申请接口"></a>第一、申请接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">申请账号：http://sc.ftqq.com/3.version</span><br></pre></td></tr></table></figure><p>这里我们需要申请接口。</p><h3 id="第二、添加脚本"><a href="#第二、添加脚本" class="headerlink" title="第二、添加脚本"></a>第二、添加脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//评论微信推送</span><br><span class="line"><span class="keyword">function</span> sc_send(<span class="variable">$comment_id</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$text</span> = <span class="string">'博客上有一条新的评论'</span>;</span><br><span class="line"><span class="variable">$comment</span> = get_comment(<span class="variable">$comment_id</span>);</span><br><span class="line"><span class="variable">$desp</span> = <span class="variable">$comment</span>-&gt;comment_content;</span><br><span class="line"><span class="variable">$key</span> = <span class="string">'你自己的SCKEY'</span>;</span><br><span class="line"><span class="variable">$postdata</span> = http_build_query(</span><br><span class="line">array(</span><br><span class="line"><span class="string">'text'</span> =&gt; <span class="variable">$text</span>,</span><br><span class="line"><span class="string">'desp'</span> =&gt; <span class="variable">$desp</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$opts</span> = array(<span class="string">'http'</span> =&gt;</span><br><span class="line">array(</span><br><span class="line"><span class="string">'method'</span> =&gt; <span class="string">'POST'</span>,</span><br><span class="line"><span class="string">'header'</span> =&gt; <span class="string">'Content-type: application/x-www-form-urlencoded'</span>,</span><br><span class="line"><span class="string">'content'</span> =&gt; <span class="variable">$postdata</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"><span class="variable">$context</span> = stream_context_create(<span class="variable">$opts</span>);</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$result</span> = file_get_contents(<span class="string">'http://sc.ftqq.com/'</span>.<span class="variable">$key</span>.<span class="string">'.send'</span>, <span class="literal">false</span>, <span class="variable">$context</span>);</span><br><span class="line">&#125;</span><br><span class="line">add_action(<span class="string">'comment_post'</span>, <span class="string">'sc_send'</span>, 19, 2);</span><br></pre></td></tr></table></figure><p>在脚本中修改我们的KEY文件，然后贴到当前WP主题的Functions.php文件中。</p><p>就这么简单。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;设置WordPress回复评论无插件微信提醒功能&quot;&gt;&lt;a href=&quot;#设置WordPress回复评论无插件微信提醒功能&quot; class=&quot;headerlink&quot; title=&quot;设置WordPress回复评论无插件微信提醒功能&quot;&gt;&lt;/a&gt;设置WordPress回复评
      
    
    </summary>
    
      <category term="wordpress" scheme="http://www.dukevs.cn/categories/wordpress/"/>
    
    
      <category term="wordpress" scheme="http://www.dukevs.cn/tags/wordpress/"/>
    
      <category term="wechat" scheme="http://www.dukevs.cn/tags/wechat/"/>
    
  </entry>
  
  <entry>
    <title>每天一个WordPress文件：wp-includes/default-constants</title>
    <link href="http://www.dukevs.cn/defaulecon.html"/>
    <id>http://www.dukevs.cn/defaulecon.html</id>
    <published>2018-06-16T15:02:35.000Z</published>
    <updated>2018-06-23T12:08:45.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="每天一个WordPress文件：wp-includes-default-constants"><a href="#每天一个WordPress文件：wp-includes-default-constants" class="headerlink" title="每天一个WordPress文件：wp-includes/default-constants"></a>每天一个WordPress文件：wp-includes/default-constants</h2><p>WordPress 在 wp-includes/default-constants 定义了 WordPress 常用常量的默认值，这些常量都可以在 wp-config.php 中预先定义，这里都会判断如果在 wp-config.php 定义了，就不设置默认值。</p><h2 id="wp-initial-constants-函数"><a href="#wp-initial-constants-函数" class="headerlink" title="wp_initial_constants() 函数"></a>wp_initial_constants() 函数</h2><h3 id="1-定义了这个和文件大小的常量，自己不用去算了，直接用就好了："><a href="#1-定义了这个和文件大小的常量，自己不用去算了，直接用就好了：" class="headerlink" title="1. 定义了这个和文件大小的常量，自己不用去算了，直接用就好了："></a>1. 定义了这个和文件大小的常量，自己不用去算了，直接用就好了：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">'KB_IN_BYTES'</span>, 1024 );</span><br><span class="line">define( <span class="string">'MB_IN_BYTES'</span>, 1024 * KB_IN_BYTES );</span><br><span class="line">define( <span class="string">'GB_IN_BYTES'</span>, 1024 * MB_IN_BYTES );</span><br><span class="line">define( <span class="string">'TB_IN_BYTES'</span>, 1024 * GB_IN_BYTES );</span><br></pre></td></tr></table></figure><h3 id="2-定义了和时间有关的常量，也别去算了，直接用就好了："><a href="#2-定义了和时间有关的常量，也别去算了，直接用就好了：" class="headerlink" title="2. 定义了和时间有关的常量，也别去算了，直接用就好了："></a>2. 定义了和时间有关的常量，也别去算了，直接用就好了：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">'MINUTE_IN_SECONDS'</span>, 60 );</span><br><span class="line">define( <span class="string">'HOUR_IN_SECONDS'</span>,   60 * MINUTE_IN_SECONDS );</span><br><span class="line">define( <span class="string">'DAY_IN_SECONDS'</span>,    24 * HOUR_IN_SECONDS   );</span><br><span class="line">define( <span class="string">'WEEK_IN_SECONDS'</span>,    7 * DAY_IN_SECONDS    );</span><br><span class="line">define( <span class="string">'MONTH_IN_SECONDS'</span>,  30 * DAY_IN_SECONDS    );</span><br><span class="line">define( <span class="string">'YEAR_IN_SECONDS'</span>,  365 * DAY_IN_SECONDS    );</span><br></pre></td></tr></table></figure><h3 id="3-定义了-WP-CONTENT-DIR-这个最常用的常量，如果-wp-config-php-中没有定义，直接定义为："><a href="#3-定义了-WP-CONTENT-DIR-这个最常用的常量，如果-wp-config-php-中没有定义，直接定义为：" class="headerlink" title="3. 定义了 WP_CONTENT_DIR 这个最常用的常量，如果 wp-config.php 中没有定义，直接定义为："></a>3. 定义了 WP_CONTENT_DIR 这个最常用的常量，如果 wp-config.php 中没有定义，直接定义为：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">define( <span class="string">'WP_CONTENT_DIR'</span>, ABSPATH . <span class="string">'wp-content'</span> );</span><br></pre></td></tr></table></figure><p>所以这个其实也说可以在 [wp-config.php] 中将 [wp-content] 目录设置为任何一个目录，伪装一下，让人不知道你用的是 WordPress。</p><h3 id="4-如果全局变量-blog-id-没有设置，就设置为-1"><a href="#4-如果全局变量-blog-id-没有设置，就设置为-1" class="headerlink" title="4. 如果全局变量 [$blog_id] 没有设置，就设置为 1."></a>4. 如果全局变量 [$blog_id] 没有设置，就设置为 1.</h3><h3 id="5-定义了-WP-MEMORY-LIMIT-和-WP-MAX-MEMORY-LIMIT-这两个-WordPress-运行时允许的内存。"><a href="#5-定义了-WP-MEMORY-LIMIT-和-WP-MAX-MEMORY-LIMIT-这两个-WordPress-运行时允许的内存。" class="headerlink" title="5. 定义了 [WP_MEMORY_LIMIT] 和 [WP_MAX_MEMORY_LIMIT] 这两个 WordPress 运行时允许的内存。"></a>5. 定义了 [WP_MEMORY_LIMIT] 和 [WP_MAX_MEMORY_LIMIT] 这两个 WordPress 运行时允许的内存。</h3><p>这两个有点复杂，WordPress 首先[wp-config.php] 中有没有定义，如果没有定义的话，检查当前的 PHP 系统是否支持运行时修改脚本所需的内存，如果不行就用 PHP 默认的设置，如果可以的话，[WP_MEMORY_LIMIT] 在多站点设置为 64M，单站点设置为 40M。[WP_MAX_MEMORY_LIMIT] 设置为 256M。</p><h3 id="6-然后-WP-DEBUG-WP-DEBUG-DISPLAY-WP-DEBUG-LOG-WP-CACHE-SCRIPT-DEBUG-MEDIA-TRASH-SHORTINIT-没有定义的话，默认都被定义为-false。"><a href="#6-然后-WP-DEBUG-WP-DEBUG-DISPLAY-WP-DEBUG-LOG-WP-CACHE-SCRIPT-DEBUG-MEDIA-TRASH-SHORTINIT-没有定义的话，默认都被定义为-false。" class="headerlink" title="6. 然后[WP_DEBUG], [WP_DEBUG_DISPLAY], [WP_DEBUG_LOG], [WP_CACHE], [SCRIPT_DEBUG], [MEDIA_TRASH], [SHORTINIT] 没有定义的话，默认都被定义为 false。"></a>6. 然后[WP_DEBUG], [WP_DEBUG_DISPLAY], [WP_DEBUG_LOG], [WP_CACHE], [SCRIPT_DEBUG], [MEDIA_TRASH], [SHORTINIT] 没有定义的话，默认都被定义为 false。</h3><p>这几个变量是干嘛的？简单说一下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">WP_DEBUG：是否开启 PHP debug 功能。</span><br><span class="line">WP_DEBUG_DISPLAY：PHP 错误脚本是否直接显示出来。</span><br><span class="line">WP_DEBUG_LOG：PHP 错误脚本是否存到文件中（wp-content/debug.log）。</span><br><span class="line">WP_CACHE：是否开启 WordPress 默认的文件缓存。</span><br><span class="line">SCRIPT_DEBUG：WordPress 加载的 JS 脚本都是 min 版本，如果要进行 JS 脚本 debug 的话，打开这个常量，就会加载非 min 版本，便于 debug。</span><br><span class="line">MEDIA_TRASH：后台的媒体是否有垃圾箱，设置为 <span class="literal">true</span>，则图片等媒体不会直接删除，而是进入垃圾箱。</span><br><span class="line">SHORTINIT：用于加载最小化 WordPress。</span><br></pre></td></tr></table></figure><h3 id="7-最后定义-WP-FEATURE-BETTER-PASSWORDS-默认为：-true，就是系统会建议用户是强度更好的密码的。"><a href="#7-最后定义-WP-FEATURE-BETTER-PASSWORDS-默认为：-true，就是系统会建议用户是强度更好的密码的。" class="headerlink" title="7. 最后定义 WP_FEATURE_BETTER_PASSWORDS 默认为： true，就是系统会建议用户是强度更好的密码的。"></a>7. 最后定义 WP_FEATURE_BETTER_PASSWORDS 默认为： true，就是系统会建议用户是强度更好的密码的。</h3><h2 id="wp-plugin-directory-constants-函数"><a href="#wp-plugin-directory-constants-函数" class="headerlink" title="wp_plugin_directory_constants() 函数"></a>wp_plugin_directory_constants() 函数</h2><p>WP_CONTENT_URL, WP_PLUGIN_DIR, WP_PLUGIN_URL, PLUGINDIR, WPMU_PLUGIN_DIR, WPMU_PLUGIN_URL, MUPLUGINDIR 这几个插件和多站点 mu 插件的目录和地址的默认，当然在 wp-config.php 中将这些目录和地址设置为其他，伪装一下，让人不知道你用的是 WordPress。</p><h2 id="wp-cookie-constants-函数"><a href="#wp-cookie-constants-函数" class="headerlink" title="wp_cookie_constants() 函数"></a>wp_cookie_constants() 函数</h2><p>定义 cookie 相关的变量的默认值，一般我们不会去改动他，所以这里就详细讲解了。</p><h2 id="wp-ssl-constants-函数"><a href="#wp-ssl-constants-函数" class="headerlink" title="wp_ssl_constants() 函数"></a>wp_ssl_constants() 函数</h2><p>它定义了 进入后台是否使用加密地址常量FORCE_SSL_ADMIN 和 进入登录页面是否使用加密地址常量FORCE_SSL_LOGIN 默认都为 false，可以在 wp-config.php 中修改。</p><h2 id="wp-functionality-constants-函数"><a href="#wp-functionality-constants-函数" class="headerlink" title="wp_functionality_constants() 函数"></a>wp_functionality_constants() 函数</h2><p>定义了自动保存常量 AUTOSAVE_INTERVAL 为 60 秒，自动清空垃圾箱常量 EMPTY_TRASH_DAYS 为 30 天，是否开始文章修订功能常量 WP_POST_REVISIONS 为 false，定时作业最长工作时间常量 WP_CRON_LOCK_TIMEOUT 为 60 秒。</p><h2 id="wp-templating-constants-函数"><a href="#wp-templating-constants-函数" class="headerlink" title="wp_templating_constants() 函数"></a>wp_templating_constants() 函数</h2><p>定义了模板目录常量 TEMPLATEPATH，样式文件所在目录常量 STYLESHEETPATH 的值，这个当然不能在wp-config.php 中修改设置，你只要拿去用就好了。</p><p>最后是：系统的默认主题常量 WP_DEFAULT_THEME。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;每天一个WordPress文件：wp-includes-default-constants&quot;&gt;&lt;a href=&quot;#每天一个WordPress文件：wp-includes-default-constants&quot; class=&quot;headerlink&quot; title=&quot;每天
      
    
    </summary>
    
    
      <category term="wordpress 文件" scheme="http://www.dukevs.cn/tags/wordpress-%E6%96%87%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 技巧：创建博客时不创建 links 表</title>
    <link href="http://www.dukevs.cn/linktable.html"/>
    <id>http://www.dukevs.cn/linktable.html</id>
    <published>2018-06-16T15:00:17.000Z</published>
    <updated>2018-06-23T12:07:25.769Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WordPress-技巧：创建博客时不创建-links-表"><a href="#WordPress-技巧：创建博客时不创建-links-表" class="headerlink" title="WordPress 技巧：创建博客时不创建 links 表"></a>WordPress 技巧：创建博客时不创建 links 表</h2><p>WordPress 默认还有 links 表，但是现在友情链接都用得很少，我们可以再在多站点管理，如何在创建博客的时候不创建这个表呢？</p><h3 id="写个插件，把下面的程序-copy-进去即可："><a href="#写个插件，把下面的程序-copy-进去即可：" class="headerlink" title="写个插件，把下面的程序 copy 进去即可："></a>写个插件，把下面的程序 copy 进去即可：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">add_filter(<span class="string">'dbdelta_create_queries'</span>, <span class="keyword">function</span>(<span class="variable">$cqueries</span>)&#123;</span><br><span class="line">    <span class="variable">$table_names</span>    = array_keys(<span class="variable">$cqueries</span>);</span><br><span class="line"></span><br><span class="line">    foreach (<span class="variable">$table_names</span> as <span class="variable">$table_name</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(strpos(<span class="variable">$table_name</span>, <span class="string">'links'</span>))&#123;</span><br><span class="line">            <span class="built_in">unset</span>(<span class="variable">$cqueries</span>[<span class="variable">$table_name</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> <span class="variable">$cqueries</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;WordPress-技巧：创建博客时不创建-links-表&quot;&gt;&lt;a href=&quot;#WordPress-技巧：创建博客时不创建-links-表&quot; class=&quot;headerlink&quot; title=&quot;WordPress 技巧：创建博客时不创建 links 表&quot;&gt;&lt;/a
      
    
    </summary>
    
    
      <category term="wordpress" scheme="http://www.dukevs.cn/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>WordPress 技巧：强制设置二级分类</title>
    <link href="http://www.dukevs.cn/secondcate.html"/>
    <id>http://www.dukevs.cn/secondcate.html</id>
    <published>2018-06-16T14:57:41.000Z</published>
    <updated>2018-06-23T12:07:04.051Z</updated>
    
    <content type="html"><![CDATA[<h1 id="WordPress-技巧：强制设置二级分类"><a href="#WordPress-技巧：强制设置二级分类" class="headerlink" title="WordPress 技巧：强制设置二级分类"></a>WordPress 技巧：强制设置二级分类</h1><p>如果你博客的分类只有两级，为了防止设置错误，可以在 WordPress 后台分类设置页面，设置父级分类下拉菜单只显示第一层，代码很简单：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add_filter(<span class="string">'taxonomy_parent_dropdown_args'</span>, <span class="keyword">function</span>(<span class="variable">$args</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(is_admin())&#123;</span><br><span class="line"><span class="variable">$args</span>[<span class="string">'depth'</span>]= 1;</span><br><span class="line"><span class="built_in">return</span> <span class="variable">$args</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;WordPress-技巧：强制设置二级分类&quot;&gt;&lt;a href=&quot;#WordPress-技巧：强制设置二级分类&quot; class=&quot;headerlink&quot; title=&quot;WordPress 技巧：强制设置二级分类&quot;&gt;&lt;/a&gt;WordPress 技巧：强制设置二级分类&lt;/
      
    
    </summary>
    
    
      <category term="wordpress" scheme="http://www.dukevs.cn/tags/wordpress/"/>
    
  </entry>
  
  <entry>
    <title>node+express+vue+mongodb实现前后端交互</title>
    <link href="http://www.dukevs.cn/nodeexpress.html"/>
    <id>http://www.dukevs.cn/nodeexpress.html</id>
    <published>2018-06-15T16:22:52.000Z</published>
    <updated>2018-07-05T03:49:21.984Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-express-vue-mongodb实现前后端交互"><a href="#node-express-vue-mongodb实现前后端交互" class="headerlink" title="node+express+vue+mongodb实现前后端交互"></a>node+express+vue+mongodb实现前后端交互</h1><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h4 id="用vue-cli脚手架生成生"><a href="#用vue-cli脚手架生成生" class="headerlink" title="用vue-cli脚手架生成生"></a>用vue-cli脚手架生成生</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">init &lt;template&gt; &lt;app-name&gt; 从一个远程模板生成一个项目 (遗留 API, 依赖 `@vue/cli-init`)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-express-vue-mongodb实现前后端交互&quot;&gt;&lt;a href=&quot;#node-express-vue-mongodb实现前后端交互&quot; class=&quot;headerlink&quot; title=&quot;node+express+vue+mongodb实现前后端交
      
    
    </summary>
    
    
      <category term="node" scheme="http://www.dukevs.cn/tags/node/"/>
    
      <category term="express" scheme="http://www.dukevs.cn/tags/express/"/>
    
      <category term="vue" scheme="http://www.dukevs.cn/tags/vue/"/>
    
      <category term="mongodb" scheme="http://www.dukevs.cn/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Github删除所有提交历史记录</title>
    <link href="http://www.dukevs.cn/githubdelet.html"/>
    <id>http://www.dukevs.cn/githubdelet.html</id>
    <published>2018-06-15T16:02:23.000Z</published>
    <updated>2018-06-15T16:12:08.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github删除所有提交历史记录"><a href="#Github删除所有提交历史记录" class="headerlink" title="Github删除所有提交历史记录"></a>Github删除所有提交历史记录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">尝试 运行 git checkout –orphan latest_branch</span><br><span class="line"></span><br><span class="line">添加所有文件git add -A</span><br><span class="line"></span><br><span class="line">提交更改git commit -am “commit message”</span><br><span class="line"></span><br><span class="line">删除分支git branch -D master</span><br><span class="line"></span><br><span class="line">将当前分支重命名git branch -m master</span><br><span class="line"></span><br><span class="line">最后，强制更新存储库。git push -f origin master</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github删除所有提交历史记录&quot;&gt;&lt;a href=&quot;#Github删除所有提交历史记录&quot; class=&quot;headerlink&quot; title=&quot;Github删除所有提交历史记录&quot;&gt;&lt;/a&gt;Github删除所有提交历史记录&lt;/h1&gt;&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="github" scheme="http://www.dukevs.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Github常用命令(陆续更新)</title>
    <link href="http://www.dukevs.cn/Github-commend.html"/>
    <id>http://www.dukevs.cn/Github-commend.html</id>
    <published>2018-06-12T15:06:51.000Z</published>
    <updated>2018-06-12T15:10:15.834Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github常用命令-陆续更新"><a href="#Github常用命令-陆续更新" class="headerlink" title="Github常用命令(陆续更新)"></a>Github常用命令(陆续更新)</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">初始化新仓库：git init</span><br><span class="line"></span><br><span class="line">检查状态：git status</span><br><span class="line"></span><br><span class="line">暂存：git add</span><br><span class="line"></span><br><span class="line">提交：git commit 远程仓库</span><br><span class="line"></span><br><span class="line">链接远程仓库：git remote add</span><br><span class="line"></span><br><span class="line">上传到服务器：git push</span><br><span class="line"></span><br><span class="line">克隆仓库：git <span class="built_in">clone</span></span><br><span class="line"></span><br><span class="line">从服务器上拉取代码：git pull 分支</span><br><span class="line"></span><br><span class="line">创建新分支：git branch</span><br><span class="line"></span><br><span class="line">切换分支：git checkout</span><br><span class="line"></span><br><span class="line">合并分支：git merge 深入</span><br><span class="line"></span><br><span class="line">比对两个不同提交之间的差别：git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">回滚提交：git revert</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github常用命令-陆续更新&quot;&gt;&lt;a href=&quot;#Github常用命令-陆续更新&quot; class=&quot;headerlink&quot; title=&quot;Github常用命令(陆续更新)&quot;&gt;&lt;/a&gt;Github常用命令(陆续更新)&lt;/h1&gt;&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="github" scheme="http://www.dukevs.cn/tags/github/"/>
    
  </entry>
  
</feed>
